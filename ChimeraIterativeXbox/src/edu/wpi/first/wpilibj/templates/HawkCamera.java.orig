///*
// * To change this template, choose Tools | Templates
// * and open the template in the editor.
// */
//package edu.wpi.first.wpilibj.templates;
//
//import edu.wpi.first.wpilibj.SmartDashboard;
//import edu.wpi.first.wpilibj.Timer;
//import edu.wpi.first.wpilibj.camera.AxisCamera;
//import edu.wpi.first.wpilibj.smartdashboard.*;
//
//import edu.wpi.first.wpilibj.camera.AxisCameraException;
//import edu.wpi.first.wpilibj.image.BinaryImage;
//import edu.wpi.first.wpilibj.image.ColorImage;
//import edu.wpi.first.wpilibj.image.NIVisionException;
//import edu.wpi.first.wpilibj.image.ParticleAnalysisReport;
//
///**
// *
// * @author Team 2890
// */
//public class HawkCamera {
//
//    AxisCamera camera;
//
//    public void init() {
//    }
//
//    public ColorImage getStream() {
//
//        try {
//            /**
//             * Do the image capture with the camera and apply the algorithm
//             * described above. This sample will either get images from the
//             * camera or from an image file stored in the top level directory in
//             * the flash memory on the cRIO. The file name in this case is
//             * "10ft2.jpg"
//             *
//             */
//            //ColorImage image = camera.getImage();     // comment if using stored images
//            ColorImage image;                           // next 2 lines read image from flash on cRIO
////                image =  new RGBImage("/10ft2.jpg");
//            image = camera.getImage();
////                image.write("10:28:90:9:C:\\Users\\Team 2890\\Desktop\\Pics\\Test.png");
////                SmartDashboard.putData("image", );
////                BinaryImage thresholdImage = image.thresholdRGB(25, 255, 0, 45, 0, 47);   // keep only red objects
////                BinaryImage thresholdImage = image.thresholdRGB(0, 45, 25, 255,  0, 47);   // keep only green objects
//            BinaryImage thresholdImage = image.thresholdRGB(0, 40, 25, 255, 0, 40);
//            BinaryImage bigObjectsImage = thresholdImage.removeSmallObjects(false, 2);  // remove small artifacts
//            BinaryImage convexHullImage = bigObjectsImage.convexHull(false);          // fill in occluded rectangles
//            BinaryImage filteredImage = convexHullImage.particleFilter(cc);           // find filled in rectangles
//
//            ParticleAnalysisReport[] reports = filteredImage.getOrderedParticleAnalysisReports();  // get list of results
//            for (int i = 0; i < reports.length; i++) {                                // print results
//                ParticleAnalysisReport r = reports[i];
//                System.out.println("Particle: " + i + ":  Center of mass x: " + r.center_mass_x);
//            }
//            System.out.println(filteredImage.getNumberParticles() + "  " + Timer.getFPGATimestamp());
//
//            /**
//             * all images in Java must be freed after they are used since they
//             * are allocated out of C data structures. Not calling free() will
//             * cause the memory to accumulate over each pass of this loop.
//             */
//            filteredImage.free();
//            convexHullImage.free();
//            bigObjectsImage.free();
//            thresholdImage.free();
//            image.free();
//
////            } catch (AxisCameraException ex) {        // this is needed if the camera.getImage() is called
////                ex.printStackTrace();
//        } catch (AxisCameraException ex) {
//            ex.printStackTrace();
//        } catch (NIVisionException ex) {
//            ex.printStackTrace();
//        }
//        return camera.getImage();
//    }
//}
